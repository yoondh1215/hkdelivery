<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 	
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hkdelivery.mapper.PurchaseMapper">


<!-- 20231130purchase10001 형식으로 purchaseNum을 뽑는다. 날짜를 붙이는 이유는 관리의 용이성을 위함이다.-->
<select id="selectNum" resultType="string">
select concat(to_char(now(), 'YYYYMMDD'), coalesce(max(substr(PURCHASE_NUM,9))::integer,10000) + 1)
from PURCHASE
where substr(PURCHASE_NUM,1,8) = to_char(now(), 'YYYYMMDD')
</select>

<insert id="purchaseInsert" parameterType="purchase">
insert into purchase (purchase_num, member_num, 
	purchase_name, purchase_date, purchase_phone, 
	purchase_addr, purchase_addr_detail, purchase_post, 
	purchase_message, purchase_status, purchase_price, 
	delivery_name) 
values (#{purchaseNum}, #{memberNum}, 
	#{purchaseName}, now(), #{purchasePhone}, 
	#{purchaseAddr}, #{purchaseAddrDetail}, #{purchasePost}, 
	#{purchaseMessage}, #{purchaseStatus}, #{purchasePrice},
	#{deliveryName} )
</insert>

<!-- cart 의 정보를 불러와서 purchaseList에 저장. select절에 구매번호를 적어줌.-->
<insert id="purchaseListInsert" parameterType="purchaseList">
insert into purchase_list (purchase_num, goods_num, 
	purchase_qty, total_price) 
select #{purchaseNum}, c.goods_num, cart_qty, goods_price * cart_qty 
from goods g, cart c 
where g.goods_num = c.goods_num and member_num = #{memberNum} 
and g.goods_num in 
	<foreach collection="goodsNums" item="goodsNum" open="(" close=")" separator="," index="index">
		#{goodsNum}
	</foreach>
</insert>


<!-- purchaseName을 만들기 위한 쿼리들-->

<resultMap id="purchaseResultMap" type="purchase">
	<!-- 생성자-->
	<constructor>
		<idArg column="purchase_num" javaType="string"/>
		<arg column="member_num" javaType="string"/>
		<arg column="purchase_name" javaType="string"/>
		<arg column="purchase_date" javaType="java.util.Date"/>
		<arg column="purchase_phone" javaType="string"/>
		<arg column="purchase_addr" javaType="string"/>
		<arg column="purchase_addr_detail" javaType="string"/>
		<arg column="purchase_post" javaType="integer"/>
		<arg column="purchase_message" javaType="string"/>
		<arg column="purchase_status" javaType="string"/>
		<arg column="purchase_price" javaType="integer"/>
		<arg column="delivery_name" javaType="string"/>
	</constructor>
</resultMap>


<select id="purchaseSelect" parameterType="string" resultMap="purchaseResultMap">
select purchase_num, member_num, purchase_name, 
	purchase_date, purchase_phone, purchase_addr, 
	purchase_addr_detail, purchase_post, purchase_message, 
	purchase_status, purchase_price, delivery_name 
from purchase 
where purchase_num = #{purchaseNum}
</select>


<select id="purchaseGoodsCount" parameterType="string" resultType="integer">
select count(*) from purchase_list 
where purchase_num = #{purchaseNum}

</select>


<select id="firstGoods" parameterType="string" resultType="string">
select goods_name from goods 
where goods_num = (
	select goods_num from (select 
								row_number() over(order by goods_num) rn, 
								goods_num from purchase_list 
							where purchase_num = #{purchaseNum}) sub
	where rn = 1
)
</select>


<insert id="paymentInsert" parameterType="payment">
insert into payment	(purchase_num, confirm_number, 
	card_num, tid, result_message, total_price, 
	pay_method, appl_date, appl_time, 
	purchase_name) 
values (#{purcahseNum},#{confirmnumber},
	#{cardnum}, #{tid}, #{resultmessage}, #{totalPrice},
	#{paymethod},#{appldate},#{appltime}
	#{purchaseName})
</insert>


<update id="purchaseStatusUpdate" parameterType="string">
update purchase 
set purchase_status = #{status} 
where purchase_num = #{purchaseNum}
</update>


<resultMap type="orderList" id="orderListResultMap">
	<association property="purchaseDTO" javaType="purchase" resultMap="purchaseResultMap"/>
	<association property="paymentDTO" javaType="payment"><!-- resultMap이 없어 직접정의 -->
		<!-- setter 사용 -->
		<id  column="purchase_num" jdbcType="VARCHAR" property="purchaseNum"/>
		<result column="confirm_number" jdbcType="VARCHAR" property="confirmnumber"/>
		<result column="pay_method" jdbcType="VARCHAR" property="paymethod"/>
		<result column="total_price" jdbcType="VARCHAR" property="totalprice"/>
		<result column="appl_date" jdbcType="VARCHAR" property="appldate"/>
		<result column="appl_time" jdbcType="VARCHAR" property="appltime"/>
		<result column="card_num" jdbcType="VARCHAR" property="cardnum"/>
	</association>
	<!-- 배송정보도 추가합니다. -->
	<!-- 객체 내에 객체를 받을 때에는 association을 사용해야 한다.-->
	<association property="deliveryDTO" javaType="delivery">
		<id  column="purchase_num" jdbcType="VARCHAR" property="purchaseNum"/>
		<result column="delivery_num" jdbcType="VARCHAR" property="deliveryNumber"/>
		<result column="delivery_date" jdbcType="DATE" property="deliveryDate"/>
		<result column="delivery_state" jdbcType="VARCHAR" property="deliveryState"/>
		<result column="delivery_company" jdbcType="VARCHAR" property="deliveryCompany" />
	</association>
	<!-- 객체 내에서 list로 받을 때는 collection을 사용해야 한다. -->
	<collection property="purchaseListGoodsDTOs" ofType="purchaseListGoods">
		<association property="purchaseList" javaType="purchaseList">
			<!-- purchase_num 과 goods_num 은 아래에서 받기 때문에 안쓰는듯?-->
			<result column="purchase_qty" jdbcType="BIGINT" property="purchaseQty"/>
			<result column="total_price" jdbcType="BIGINT" property="totalPrice"/>
		</association>
		<association property="goods" javaType="goods"><!-- resultMap이 없으므로 작성해야합니다. -->
			<id column="goods_Num" jdbcType="VARCHAR" property="goodsNum"/>
			<result column="goods_name" jdbcType="VARCHAR" property="goodsName"/>
			<result column="goods_price" jdbcType="BIGINT" property="goodsPrice"/>
			<result column="goods_content" jdbcType="VARCHAR" property="goodsContent"/>
			<result column="delivery_cost" jdbcType="BIGINT" property="deliveryCost"/>
			<result column="shop_num" jdbcType="VARCHAR" property="shopNum"/>
			<result column="goods_main" jdbcType="VARCHAR" property="goodsMain"/>
			<result column="goods_main_org" jdbcType="VARCHAR" property="goodsMainOrg"/>
			<result column="goods_images" jdbcType="VARCHAR" property="goodsImages"/>
			<result column="goods_images_org" jdbcType="VARCHAR" property="goodsImagesOrg"/>
		</association>
		<!-- 값을 받아올 수 있게 collection안에 후기를 추가해야합니다. -->
		<association property="review" javaType="review" >
			<result column="review_Date" jdbcType="DATE" property="reviewDate"/>
			<result column="review_Content" jdbcType="VARCHAR" property="reviewContent"/>
			<result column="review_score" jdbcType="BIGINT" property="reviewScore"/>
			<result column="member_id" jdbcType="VARCHAR" property="memberId"/>
			<result column="review_title" jdbcType="VARCHAR" property="reviewTitle"/>			
		</association>
	</collection>
</resultMap>




<select id="orderList" parameterType="string" resultMap="orderListResultMap">
	select 	  p.PURCHASE_NUM, PURCHASE_date, PURCHASE_PRICE, delivery_Addr
			  , delivery_Addr_Detail, delivery_Post,delivery_Phone,  message, purchase_Status
	 		  , member_num, delivery_name
	 		  , confirm_number, appl_time , pay_method, total_price, appl_date, card_num
	 		  , purchase_qty, total_price
	 		  , g.goods_Num, goods_Name, goods_main, delivery_Cost, goods_Price
			  , goods_Content
			  , delivery_num, delivery_date, delivery_state, delivery_Company	<!-- 배송정보 추가 --> 
			  , review_Date, review_Content, review_score, member_Id, review_Num
	from purchase p left outer join payment pm <!-- 결제할 때 취소를 하면 구매정보는 있지만 결제는 없을 수 있다. 구매내역을 확인하 수 있어야 한다.-->
	on p.PURCHASE_NUM = pm.PURCHASE_NUM join purchase_list pl
	on p.PURCHASE_NUM = pl.PURCHASE_NUM join goods g
	on pl.goods_num = g.goods_num left outer join delivery d <!-- 배송정보는 없어도 구매정보는 출력되야 합니다. -->
	on p.PURCHASE_NUM = d.PURCHASE_NUM  left outer join review r <!-- 후기가 없어도 출력되야 합니다. -->
	on p.PURCHASE_NUM = r.PURCHASE_NUM and pl.goods_num = r.goods_num	
	<where>
		<if test="memberNum != null"> <!--  null이 전달되므로 null이 아닐때 실행 -->
			member_num = #{memberNum}
		</if>
		<if test="purchaseNum != null">
		 	p.purchase_Num = #{purchaseNum}
		</if>
	</where>
</select>

<delete id="paymentDelete" parameterType="string">
delete from payment 
where purchase_num = #{purchaseNum}
</delete>





</mapper>